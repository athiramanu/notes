{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Note.svelte"
  ],
  "sourcesContent": [
    "<main>\n\t<svelte:component this={Route} {params} />\n</main>\n\n<script>\n\timport Navaid from 'navaid';\n\timport { onDestroy } from 'svelte';\n\n\tlet Route, params={}, active;\n\tlet uri = location.pathname;\n\t$: active = uri.split('/')[1] || 'home';\n\n\tfunction run(thunk, obj) {\n\t\tconst target = uri;\n\n\t\tthunk.then(m => {\n\t\t\tif (target !== uri) return;\n\n\t\t\tparams = obj || {};\n\n\t\t\tif (m.preload) {\n\t\t\t\tm.preload({ params }).then(() => {\n\t\t\t\t\tif (target !== uri) return;\n\t\t\t\t\tRoute = m.default;\n\t\t\t\t\twindow.scrollTo(0, 0);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tRoute = m.default;\n\t\t\t\twindow.scrollTo(0, 0);\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction track(obj) {\n\t\turi = obj.state || obj.uri || location.pathname;\n\t\tif (window.ga) ga.send('pageview', { dp:uri });\n\t}\n\n\taddEventListener('replacestate', track);\n\taddEventListener('pushstate', track);\n\taddEventListener('popstate', track);\n\n\tconst router = Navaid('/')\n\t\t.on('/', () => run(import('./Home.svelte')))\n\t\t.on('/:postid', obj => run(import('./Note.svelte'), obj))\n\t\t.listen();\n\n\tonDestroy(router.unlisten);\n</script>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>\n",
    "<svelte:head>\n\t<title>NotePad</title>\n</svelte:head>\n\n<h1>Type your text here and access it from anywhere</h1>\n<textarea type=\"text\" class=\"textArea\" bind:value={text}></textarea>\n<div class=\"save\">\n\t<button on:click=\"{save}\">Save</button>\n</div>\n\n<script>\n\tlet item = {};\n\n    let text = \"\";\n\tlet name = \"\";\n\n\tfunction save() {\n\t\tfetch(`http://localhost:3000/${name}`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify({\"text\": text})\n\t\t}).then(response => {\n\t\t\tconsole.log(\"Updated\")\n\t\t}).catch(err => {\n\t\t\tconsole.log(err);\n\t\t})\n\t}\n\n\tfunction load(postid) {\n\t\tconst curr = item.id;\n\t\tconst isCurrent = curr && curr == postid;\n\t\tif (!postid || isCurrent) return Promise.resolve(item);\n\t\tname = postid;\n\t\treturn fetch(`http://localhost:3000/${name}`)\n\t\t\t.then(r => r.json())\n\t\t\t.then(data => {\n\t\t\t\ttext = data[0] ? data[0].text : data.text\n\t\t\t});\n\t}\n\n\texport function preload(req) {\n\t\treturn load(req.params.postid);\n\t}\n\n\t// Comes from App (router)\n\texport let params = {};\n\n\t// Initial value (preload)\n\tlet post = item;\n\n\t// Reactively update `post` value\n\t$: load(params.postid).then(obj => post = obj);\n</script>\n\n<style>\n    .textArea {\n\t\twidth: 70%;\n\t\tmin-height: 30em;\n\t\tresize: none;\n\t}\n\th1 {\n\t\tcolor: #ff3e00;\n\t\tfont-weight: 100;\n\t}\n\tbutton {\n\t\tbackground-color: #ff3e00; /* Green */\n\t\tborder: none;\n\t\tcolor: white;\n\t\tpadding: 15px 32px;\n\t\ttext-align: center;\n\t\ttext-decoration: none;\n\t\tdisplay: block;\n\t\tfont-size: 16px;\n\t\tfloat: right;\n\t\tcursor: pointer;\n\t}\n\t.save {\n\t\twidth: 70%;\n\t    margin: 0 auto;\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AAmDC,IAAI,eAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC;ACLE,SAAS,cAAC,CAAC,AACb,KAAK,CAAE,GAAG,CACV,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,IAAI,AACb,CAAC,AACD,EAAE,cAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,WAAW,CAAE,GAAG,AACjB,CAAC,AACD,MAAM,cAAC,CAAC,AACP,gBAAgB,CAAE,OAAO,CACzB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,UAAU,CAAE,MAAM,CAClB,eAAe,CAAE,IAAI,CACrB,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,OAAO,AAChB,CAAC,AACD,KAAK,cAAC,CAAC,AACN,KAAK,CAAE,GAAG,CACP,MAAM,CAAE,CAAC,CAAC,IAAI,AAClB,CAAC"
}