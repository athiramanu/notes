import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, j as globals, a as space, e as element, b as attr_dev, c as add_location, f as insert_dev, k as set_input_value, g as append_dev, l as listen_dev, n as noop, h as detach_dev, r as run_all } from './index.js';

/* src/components/Note.svelte generated by Svelte v3.37.0 */

const { console: console_1 } = globals;
const file = "src/components/Note.svelte";

function create_fragment(ctx) {
	let t0;
	let textarea;
	let t1;
	let div;
	let button;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			t0 = space();
			textarea = element("textarea");
			t1 = space();
			div = element("div");
			button = element("button");
			button.textContent = "Save";
			document.title = "NotePad";
			attr_dev(textarea, "type", "text");
			attr_dev(textarea, "class", "svelte-5a0vx4");
			add_location(textarea, file, 4, 0, 54);
			attr_dev(button, "class", "svelte-5a0vx4");
			add_location(button, file, 6, 1, 126);
			attr_dev(div, "class", "save svelte-5a0vx4");
			add_location(div, file, 5, 0, 106);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, textarea, anchor);
			set_input_value(textarea, /*text*/ ctx[0]);
			insert_dev(target, t1, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, button);

			if (!mounted) {
				dispose = [
					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[4]),
					listen_dev(button, "click", /*save*/ ctx[1], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*text*/ 1) {
				set_input_value(textarea, /*text*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(textarea);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Note", slots, []);
	let item = {};
	let text = "";
	let name = "";

	function save() {
		fetch(`http://localhost:3000/${name}`, {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({ text })
		}).then(response => {
			console.log("Updated");
		}).catch(err => {
			console.log(err);
		});
	}

	function load(postid) {
		const curr = item.id;
		const isCurrent = curr && curr == postid;
		if (!postid || isCurrent) return Promise.resolve(item);
		name = postid;

		return fetch(`http://localhost:3000/${name}`).then(r => r.json()).then(data => {
			$$invalidate(0, text = data.text);
		});
	}

	function preload(req) {
		return load(req.params.postid);
	}

	let { params = {} } = $$props;

	// Initial value (preload)
	let post = item;

	const writable_props = ["params"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Note> was created with unknown prop '${key}'`);
	});

	function textarea_input_handler() {
		text = this.value;
		$$invalidate(0, text);
	}

	$$self.$$set = $$props => {
		if ("params" in $$props) $$invalidate(3, params = $$props.params);
	};

	$$self.$capture_state = () => ({
		item,
		text,
		name,
		save,
		load,
		preload,
		params,
		post
	});

	$$self.$inject_state = $$props => {
		if ("item" in $$props) item = $$props.item;
		if ("text" in $$props) $$invalidate(0, text = $$props.text);
		if ("name" in $$props) name = $$props.name;
		if ("params" in $$props) $$invalidate(3, params = $$props.params);
		if ("post" in $$props) post = $$props.post;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*params*/ 8) {
			// Reactively update `post` value
			load(params.postid).then(obj => post = obj);
		}
	};

	return [text, save, preload, params, textarea_input_handler];
}

class Note extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { preload: 2, params: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Note",
			options,
			id: create_fragment.name
		});
	}

	get preload() {
		return this.$$.ctx[2];
	}

	set preload(value) {
		throw new Error("<Note>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get params() {
		throw new Error("<Note>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set params(value) {
		throw new Error("<Note>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Note;
//# sourceMappingURL=Note-917f9c0a.js.map
